require("dotenv").config();const{SESSION_ID:SESSION_ID}=process.env,{waitFor:waitFor,asyncForEach:asyncForEach}=require("../common/common.util"),path=require("path"),fs=require("fs"),onVerifyWANumberHandler=async(e,n,s)=>{const{signalRClient:t,serverHub:o}=require("../signalr/signalr.util"),i=JSON.parse(e);let r=[];await asyncForEach(i,async e=>{const{phoneNumber:n,sessionId:i}=e;if(i===SESSION_ID){const[e]=await s.onWhatsApp(n);if(e&&e.exists){const e={id:n,name:"Verified",sessionId:SESSION_ID};r.push(e),100===r.length&&(t.connection.hub.invoke(o,"ReceiveContacts",JSON.stringify({contacts:r,sessionId:SESSION_ID})),r=[])}else{const e={id:n,name:"Not verified",sessionId:SESSION_ID};r.push(e),100===r.length&&(t.connection.hub.invoke(o,"ReceiveContacts",JSON.stringify({contacts:r,sessionId:SESSION_ID})),r=[])}}}),r.push({id:"status@broadcast"}),t.connection.hub.invoke(o,"ReceiveContacts",JSON.stringify({contacts:r,sessionId:SESSION_ID}))},onDisconnectHandler=async(e,n)=>{const{signalRClient:s}=require("../signalr/signalr.util"),t=JSON.parse(e),{sessionId:o}=t;if(o===SESSION_ID)try{n.ws.terminate(),s.end(),setTimeout(()=>process.exit(),500)}catch(e){console.log(`ex: ${e}`)}},onLogoutHandler=async(e,n)=>{const{signalRClient:s}=require("../signalr/signalr.util"),t=JSON.parse(e),{sessionId:o}=t;if(o===SESSION_ID){try{await n.logout(),s.end(),setTimeout(()=>process.exit(),500)}catch(e){console.log(`ex: ${e}`)}setTimeout(()=>process.exit(),500),s.end()}},onGetCurrentStateHandler=async(e,n)=>{const{signalRClient:s,serverHub:t}=require("../signalr/signalr.util"),o=JSON.parse(e),{sessionId:i}=o;if(i===SESSION_ID)try{s.connection.hub.invoke(t,"ChangeState",JSON.stringify({state:n,sessionId:SESSION_ID}))}catch(e){console.log(`ex: ${e}`)}};module.exports={onVerifyWANumberHandler:onVerifyWANumberHandler,onDisconnectHandler:onDisconnectHandler,onLogoutHandler:onLogoutHandler,onGetCurrentStateHandler:onGetCurrentStateHandler};